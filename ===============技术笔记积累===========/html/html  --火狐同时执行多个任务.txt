以前写 JavaScript 脚本时，事件都是采用 
object.event = handler; 
的方式初始化。这种方式对于 Internet Explorer、Mozilla/Firefox 和 Opera 来说很通用。但是有一个问题就是，这种方式只能一个事件对应一个事件处理过程。如果希望一个事件可以依次执行多个处理过程就不好用了。 

但 是 Internet Explorer 从 5.0 开始提供了一个 attachEvent 方法，使用这个方法，就可以给一个事件指派多个处理过程了。attachEvent 对于目前的 Opera 也适用。但是问题是 Mozilla/Firefox 并不支持这个方法。但是它支持另一个 addEventListener 方法，这个方法跟 attachEvent 差不多，也是用来给一个事件指派多个处理过程的。但是它们指派的事件有些区别，在 attachEvent 方法中，事件是以 “on” 开头的，而在 addEventListener 中，事件没有开头的 “on”，另外 addEventListener 还有第三个参数，一般这个参数指定为 false 就可以了。 


attachEvent 支持IE， Opera适用，Mozilla/Firefox 并不支持这个方法
Mozilla/Firefox支持addEventListener 

if(document.all){
    window.attachEvent('onload', setCalcInterval);  //setCalcInterval是需要执行的函数任务
    window.attachEvent('onload', getCalcResult);  //getCalcResult是需要执行的另外一个函数任务
}else{
     window.addEventListener('load',setCalcInterval,false);
     window.addEventListener('load',getCalcResult,false);
}



 if (window.attachEvent) {  
	window.attachEvent("onload", remove);  
 } else if (window.addEventListener) {  
	window.addEventListener("load", remove, false);    
}   

function remove() {  
  var div = document.getElementById("divprogressbar");  
  document.body.removeChild(div);  
} 


可能你也碰到过这种情况,就是在js的代码中用了window.onload后,可能会影响到body中的onload事件。你可以全写在body 中，也可以全放到window.onload中，但是这样并不是很方便，有时我们需要两个同时用到。这时就要用window.attachEvent和 window.addEventListener来解决一下。   
下面是一个解决方法。至于attachEvent和addEventListener的用法，可以自己Google或百度一下。   
if (document.all){   
window.attachEvent('onload',函数名)//IE中   
}   
else{   
window.addEventListener('load',函数名,false);//firefox   
}   
在近来的工作中，用到了attachEvent方法，该方法可以为某一事件附加其它的处理事件，有时候可能比较有用，这里将其基本用法总结一下。   
其语法可以查看《DHTML手册》，里面有详细的说明，这里贴一个例子，该例子来自互联网：   
document.getElementById("btn").onclick = method1;   
document.getElementById("btn").onclick = method2;   
document.getElementById("btn").onclick = method3;   
如果这样写,那么将会只有medhot3被执行   
写成这样：   
var btn1Obj = document.getElementById("btn1");   
//object.attachEvent(event,function);   
btn1Obj.attachEvent("onclick",method1);   
btn1Obj.attachEvent("onclick",method2);   
btn1Obj.attachEvent("onclick",method3);   
执行顺序为method3->method2->method1   
如果是Mozilla系列，并不支持该方法，需要用到addEventListener   
var btn1Obj = document.getElementById("btn1");   
//element.addEventListener(type,listener,useCapture);   
btn1Obj.addEventListener("click",method1,false);   
btn1Obj.addEventListener("click",method2,false);   
btn1Obj.addEventListener("click",method3,false);   
执行顺序为method1->method2->method3  